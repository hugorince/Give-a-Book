generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  username       String?        @unique
  password       String
  postalCode     String
  gpsCoordinates Float[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  books          Book[]         @relation("UsersBooks")
  booked         Booking[]      @relation("OwnerBookings")
  requested      Booking[]      @relation("UserBookings")
  chatsRequester Chat[]         @relation("requesterChat")
  chatsOwner     Chat[]         @relation("ownerChat")
  messages       Message[]
  notifications  Notification[]
}

model Book {
  id                  Int          @id @default(autoincrement())
  title               String
  author              String
  description         String
  image               String?
  type                BookType
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  user                User         @relation("UsersBooks", onDelete: Cascade, fields: [userId], references: [id])
  userId              Int
  likes               Int[]
  booking             Booking?     @relation("BookBooking")
  proposed            Proposition? @relation("proposedBook")
  propositionReceived Proposition? @relation("receiverBook")
}

model Booking {
  id            Int               @id @default(autoincrement())
  createdAt     DateTime          @default(now())
  status        BookingStatusType
  requester     User              @relation("UserBookings", onDelete: Cascade, fields: [requesterId], references: [id])
  requesterId   Int
  owner         User              @relation("OwnerBookings", onDelete: Cascade, fields: [ownerId], references: [id])
  ownerId       Int
  distance      Int
  book          Book              @relation("BookBooking", onDelete: Cascade, fields: [bookId], references: [id])
  bookId        Int               @unique
  notifications Notification[]
  chat          Chat?
}

model Proposition {
  id             Int                   @id @default(autoincrement())
  createdAt      DateTime              @default(now())
  status         PropositionStatusType
  proposedBook   Book                  @relation("proposedBook", onDelete: Cascade, fields: [proposedBookId], references: [id])
  receiverBook   Book                  @relation("receiverBook", onDelete: Cascade, fields: [receiverBookId], references: [id])
  proposedBookId Int                   @unique
  receiverBookId Int                   @unique
  notification   Notification[]
}

model Chat {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  requester   User      @relation("requesterChat", onDelete: Cascade, fields: [requesterId], references: [id])
  requesterId Int
  owner       User      @relation("ownerChat", onDelete: Cascade, fields: [ownerId], references: [id])
  ownerId     Int
  messages    Message[] @relation("message")
  booking     Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId   Int       @unique
}

model Message {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  text         String
  sender       User           @relation(fields: [senderId], onDelete: Cascade, references: [id])
  senderId     Int
  chat         Chat           @relation("message", fields: [chatId], onDelete: Cascade, references: [id])
  chatId       Int
  notification Notification[]
}

model Notification {
  id            Int              @id @default(autoincrement())
  createdAt     DateTime         @default(now())
  type          NotificationType
  user          User             @relation(fields: [userId], onDelete: Cascade, references: [id])
  userId        Int
  isRead        Boolean          @default(false)
  booking       Booking?         @relation(fields: [bookingId], onDelete: Cascade, references: [id])
  bookingId     Int?
  proposition   Proposition?     @relation(fields: [propositionId], onDelete: Cascade, references: [id])
  propositionId Int?
  message       Message?         @relation(fields: [messageId], onDelete: Cascade, references: [id])
  messageId     Int?
}

enum BookType {
  GIVE
  EXCHANGE
}

enum BookingStatusType {
  REQUESTED
  COMPLETED
}

enum NotificationType {
  BOOKING_REQUEST
  PROPOSITION
  MESSAGE
}

enum PropositionStatusType {
  PENDING
  ACCEPTED
  REFUSED
}

generator dbml {
  provider = "prisma-dbml-generator"
}
